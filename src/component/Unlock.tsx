import React, { useState } from "react";
import Swal from "sweetalert2";
import CardText from "./CardText"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ CardText ‡πÅ‡∏ó‡∏ô Card
import GiftBox from "./Gift";
import "./lock.css";

interface UnlockProps {
  onUnlock: () => void;
}

const UnlockComponent: React.FC<UnlockProps> = ({ onUnlock }) => {
  const [isUnlocked, setIsUnlocked] = useState(false); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Unlock
  const [inputValues, setInputValues] = useState({
    input1: "",
    input2: "",
    input3: "",
    input4: "",
  });
  const [showGiftBox, setShowGiftBox] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á GiftBox
  const [isButtonDisabled, setIsButtonDisabled] = useState(false); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡∏û‡∏≠‡πÅ‡∏Ñ‡πà‡∏ô‡∏µ‡πâ"
  const [isButtonMoving, setIsButtonMoving] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î
  const [moveCount, setMoveCount] = useState(0); // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
  const [showQuestionContainer, setShowQuestionContainer] = useState(true); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°

  const handleInputChange = (
    event: React.ChangeEvent<HTMLInputElement>,
    field: string
  ) => {
    const { value } = event.target;
    setInputValues({ ...inputValues, [field]: value });

    if (value.length === 1) {
      const nextInputId = `input-${parseInt(field.slice(-1)) + 1}`;
      const nextInput = document.getElementById(nextInputId) as HTMLInputElement;
      if (nextInput) nextInput.focus();
    }
  };

  const handleUnlock = () => {
    if (
      inputValues.input1.toLowerCase() === "m" &&
      inputValues.input2.toLowerCase() === "i" &&
      inputValues.input3.toLowerCase() === "n" &&
      inputValues.input4.toLowerCase() === "t"
    ) {
      setIsUnlocked(true); // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ isUnlocked ‡πÄ‡∏õ‡πá‡∏ô true
      onUnlock(); // Notify parent component
      Swal.fire({
        title: "‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏Å ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß",
        text: "Happy Birthday mint!",
        imageUrl:
          "https://media.giphy.com/media/HIh3Bjd9edbvzPnOYg/giphy.gif?cid=ecf05e4778va817m7ak53bxrztib6yqmyu3ptkk09ybpvh5u&ep=v1_gifs_search&rid=giphy.gif&ct=g",
        imageWidth: 100,
        imageHeight: 100,
        imageAlt: "Gift Icon",
        confirmButtonText: "Yay!",
        timer: 2000,
        timerProgressBar: true,
      });
    } else {
      Swal.fire({
        title: "‡πÇ‡∏≠‡πâ‡∏¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà",
        text: "‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÉ‡∏´‡∏°‡πà!",
        imageUrl:
          "https://media.giphy.com/media/OOezqqxPB8aJ2/giphy.gif?cid=ecf05e47z74e96uxz038p2jtnxfphrzn9d3r52ti0n04aiwi&ep=v1_gifs_search&rid=giphy.gif&ct=g",
        imageWidth: 100,
        imageHeight: 100,
        imageAlt: "Angry Icon",
        confirmButtonText: "NOOOO!",
        timer: 2000,
        timerProgressBar: true,
      }).then(() => {
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ input ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡∏ú‡∏¥‡∏î
        setInputValues({
          input1: "",
          input2: "",
          input3: "",
          input4: "",
        });
        // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏£‡∏Å
        const firstInput = document.getElementById("input-1") as HTMLInputElement;
        if (firstInput) firstInput.focus();
      });
    }
  };

  const handleViewMore = () => {
    setShowGiftBox(true); // ‡πÅ‡∏™‡∏î‡∏á GiftBox
    setShowQuestionContainer(false); // ‡∏ã‡πà‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î "‡∏î‡∏π‡∏ï‡πà‡∏≠"
  };

  const handleStopMovingButton = () => {
    setIsButtonDisabled(true); // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏û‡∏≠‡πÅ‡∏Ñ‡πà‡∏ô‡∏µ‡πâ" ‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö
    setIsButtonMoving(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏¢‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î
    setMoveCount((prevCount) => prevCount + 1); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
  };

  const randomMovement = () => {
    if (isButtonMoving) {
      const randomX = Math.floor(Math.random() * 200) - 100; // ‡∏Ç‡∏¢‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ -100 ‡∏ñ‡∏∂‡∏á 100
      const randomY = Math.floor(Math.random() * 200) - 100;
      return {
        transform: `translate(${randomX}px, ${randomY}px)`,
      };
    }
    return {};
  };

  return (
    <div>
      <div className="input-box">
        {["input1", "input2", "input3", "input4"].map((field, index) => (
          <input
            key={index}
            id={`input-${index + 1}`}
            type="text"
            value={inputValues[field as keyof typeof inputValues]}
            onChange={(e) => handleInputChange(e, field)}
            className="input-field"
            maxLength={1}
          />
        ))}
      </div>
      <button
        className="unlock-button"
        onClick={handleUnlock}
        disabled={!(inputValues.input1 && inputValues.input2 && inputValues.input3 && inputValues.input4)}
      >
        <div className="unlock-container">
          <img
            className="unlock-icon"
            src="https://cdn-icons-png.flaticon.com/512/5951/5951623.png"
            alt="Unlock Icon"
          />
          <h6>Unlock gift</h6>
        </div>
      </button>

      <div className="card">
        {isUnlocked && (
          <>
            <CardText
              title="Happy Birthday!"
              message="‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÄ‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡∏ó‡∏≥‡∏°‡∏≤‡∏Å‡πÜ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ò‡∏≠‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠‡πÄ‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡πÑ‡∏î‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ô‡∏∞ ‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏ò‡∏≠‡∏à‡∏∞‡∏ä‡∏≠‡∏ö ‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏ï‡∏≠‡∏ô‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ä‡∏≠‡∏ö‡πÅ‡∏°‡∏ßüêà‚Äç‚¨õ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏°‡∏≤‡∏™‚òÉÔ∏è ‡πÄ‡∏ò‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏°‡∏≤‡∏™ ‡πÄ‡∏Ñ‡πâ‡∏≤‡∏Å‡πá‡πÄ‡∏•‡∏¢‡πÄ‡∏≠‡∏≤‡∏´‡∏¥‡∏°‡∏∞‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ò‡∏µ‡∏°‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏°‡∏≤‡∏™ ‡πÄ‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏´‡∏•‡∏∞ üéÑ‚ùÑÔ∏è‚òÉÔ∏èü¶å"
            />

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å */}
            {showQuestionContainer && (
              <div className="button-container">
                <div className="question-container">
                  ‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏≠‡∏µ‡∏Å‡∏°‡∏±‡πâ‡∏¢ ?
                </div>

                <div className="button-group">
                  <button
                    className="continue-button"
                    onClick={handleViewMore}
                  >
                    ‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å
                  </button>
                  <button
                    className="stop-button"
                    onClick={handleStopMovingButton}
                    style={randomMovement()}
                  >
                    ‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß
                  </button>
                </div>
              </div>
            )}
          </>
        )}
      </div>
      <div className="giftbox">
        {/* ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î "‡∏î‡∏π‡∏ï‡πà‡∏≠" ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç */}
        {showGiftBox && (
          <GiftBox
            onClose={() => console.log("Gift Box Closed")} // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ
          />
        )}
      </div>
    </div>
  );
};

export default UnlockComponent;
